name: build-luci-app-nodemanager

on:
  workflow_dispatch:
  push:
    paths:
      - '**'
  pull_request:
    paths:
      - '**'

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      PACKAGE_NAME: luci-app-nodemanager
      OWRT_VER: 24.10.2
      TARGET: x86
      SUBTARGET: 64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends zstd rsync

      - name: Download & unpack OpenWrt SDK
        shell: bash
        run: |
          set -euo pipefail
          SDK_URL="https://downloads.openwrt.org/releases/${OWRT_VER}/targets/${TARGET}/${SUBTARGET}/openwrt-sdk-${OWRT_VER}-${TARGET}-${SUBTARGET}_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          echo "SDK_URL=${SDK_URL}"
          curl -fL -o sdk.tar.zst "${SDK_URL}"
          mkdir -p "$RUNNER_TEMP/sdk"
          tar -I zstd -xf sdk.tar.zst -C "$RUNNER_TEMP/sdk"
          # 避免 tar|head 在 pipefail 下触发 SIGPIPE
          tar -I zstd -tf sdk.tar.zst > /tmp/sdk.list
          SDK_BASE="$(head -1 /tmp/sdk.list | cut -d/ -f1)"
          SDK_DIR="$RUNNER_TEMP/sdk/$SDK_BASE"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"
          echo "SDK_BASE=$SDK_BASE" >> "$GITHUB_ENV"
          ln -s "$SDK_DIR" sdk

      - name: Sync single-package repo into SDK/package/
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$SDK_DIR/package/${PACKAGE_NAME}"
          # 把当前仓库全部同步到 SDK 的 package/<pkg>/ 下（排除 CI 文件夹）
          rsync -a --delete --exclude '.git' --exclude '.github' ./ "$SDK_DIR/package/${PACKAGE_NAME}/"

      - name: Prepare feeds & minimal .config
        shell: bash
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # 只构建我们这个包；禁掉会引来 lua.h / ucode 相关编译错误的包
          rm -f .config
          {
            echo "CONFIG_TARGET_${TARGET}=y"
            echo "CONFIG_TARGET_${TARGET}_${SUBTARGET}=y"
            echo "CONFIG_PACKAGE_${PACKAGE_NAME}=m"
            # 显式关闭这些可选组件，避免把 liblua / ucode-mod-* / rpcd-mod-luci 等拉进来
            echo "CONFIG_PACKAGE_liblucihttp-lua=n"
            echo "CONFIG_PACKAGE_ucode-mod-lua=n"
            echo "CONFIG_PACKAGE_ucode-mod-html=n"
            echo "CONFIG_PACKAGE_rpcd-mod-luci=n"
          } > .config
          make defconfig

      - name: Build host tools (po2lmo)
        shell: bash
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          # luci-base 的 host-compile 会把 po2lmo/jsmin 装到 hostpkg/bin
          make -j"$(nproc)" V=s package/feeds/luci/luci-base/host-compile

      - name: Build ${{ env.PACKAGE_NAME }}
        shell: bash
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          export PO2LMO="$PWD/staging_dir/hostpkg/bin/po2lmo"
          make -j"$(nproc)" V=s package/${PACKAGE_NAME}/compile

      - name: Collect .ipk artifacts
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE/artifacts"
          find "$SDK_DIR/bin" -type f -name "*.ipk" -print -exec cp -v "{}" "$GITHUB_WORKSPACE/artifacts/" \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipks-${{ env.OWRT_VER }}-${{ env.TARGET }}-${{ env.SUBTARGET }}
          path: artifacts/*.ipk
