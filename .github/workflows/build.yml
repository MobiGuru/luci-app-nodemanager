name: Build (OpenWrt SDK 24.10.2 x86_64)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TERM: xterm
      DEBIAN_FRONTEND: noninteractive
      PACKAGE_NAME: luci-app-nodemanager
      OWRT_VER: 24.10.2
      OWRT_TARGET: x86
      OWRT_SUBTARGET: 64
      SDK_FILE: openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
      SDK_URL: https://downloads.openwrt.org/releases/24.10.2/targets/x86/64/openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install host deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3 curl git zstd

      - name: Download OpenWrt SDK
        run: |
          set -euo pipefail
          curl -fL --retry 5 -o "$SDK_FILE" "$SDK_URL"
          mkdir -p "$RUNNER_TEMP/sdk"
          tar -I zstd -tf "$SDK_FILE" | head -n1 | cut -d/ -f1 > "$RUNNER_TEMP/base.txt"
          SDK_BASE="$(cat "$RUNNER_TEMP/base.txt")"
          tar -I zstd -xf "$SDK_FILE" -C "$RUNNER_TEMP/sdk"
          SDK_DIR="$RUNNER_TEMP/sdk/$SDK_BASE"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"
          echo "SDK_BASE=$SDK_BASE" >> "$GITHUB_ENV"
          ln -s "$SDK_DIR" sdk

      - name: Setup feeds
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare .config with LuCI zh-cn enabled (non-interactive)
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          # 先生成一个基础 .config
          make defconfig
          # 启用 LuCI 中文语言开关（生成 luci-i18n-* 包的前置条件）
          {
            echo 'CONFIG_LUCI_LANG_zh_Hans=y'
            # 如需台繁也一起打包再打开下一行：
            # echo 'CONFIG_LUCI_LANG_zh_Hant=y'
          } >> .config
          # 展开配置
          make defconfig

      - name: Add package into SDK
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          rm -rf "package/$PACKAGE_NAME"
          ln -s "$GITHUB_WORKSPACE" "package/$PACKAGE_NAME"

      - name: Build package
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          make -j"$(nproc)" V=s package/$PACKAGE_NAME/compile

      # 可选：按 po/ 目录尝试逐个语言的 i18n 子包（如果没定义也不会失败）
      - name: Build i18n subpackages (best effort)
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          lang_suffix() {
            case "$1" in
              zh_Hans|zh-cn) echo zh-cn ;;
              zh_Hant|zh-tw) echo zh-tw ;;
              *) echo "$1" ;;
            esac
          }
          if [ -d "$GITHUB_WORKSPACE/po" ]; then
            for d in "$GITHUB_WORKSPACE"/po/*; do
              [ -d "$d" ] || continue
              base="$(basename "$d")"
              code="$(lang_suffix "$base")"
              make -j"$(nproc)" V=s package/luci-i18n-nodemanager-"$code"/compile || true
            done
          fi

      - name: Collect artifacts
        if: always()
        run: |
          set -euo pipefail
          OUT="$GITHUB_WORKSPACE/output"
          mkdir -p "$OUT"
          # LuCI 应用/翻译通常在 bin/packages/<arch>/<feed>/
          # 但也兼容少数会落在 bin/targets/<target>/<subtarget>/packages/ 的情况
          find "$SDK_DIR/bin" -type f \( \
              -name 'luci-app-nodemanager_*.ipk' -o \
              -name 'luci-i18n-nodemanager-*_*.ipk' \
            \) -print -exec cp -v {} "$OUT"/ \; || true
          echo "=== Tree of bin ==="
          (cd "$SDK_DIR/bin" && find . -maxdepth 3 -type d -print | sort)
          echo "=== Collected ==="
          ls -l "$OUT" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipk-${{ env.OWRT_VER }}-${{ env.OWRT_TARGET }}-${{ env.OWRT_SUBTARGET }}
          path: output/*.ipk
          if-no-files-found: warn
