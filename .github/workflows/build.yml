name: Build (OpenWrt SDK 24.10.2 x86_64)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TERM: xterm
      DEBIAN_FRONTEND: noninteractive
      PACKAGE_NAME: luci-app-nodemanager
      OWRT_VER: 24.10.2
      OWRT_TARGET: x86
      OWRT_SUBTARGET: 64
      SDK_FILE: openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
      SDK_URL: https://downloads.openwrt.org/releases/24.10.2/targets/x86/64/openwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install host deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3 curl git zstd

      - name: Download OpenWrt SDK
        run: |
          set -euo pipefail
          curl -fL --retry 5 -o "$SDK_FILE" "$SDK_URL"
          mkdir -p "$RUNNER_TEMP/sdk"
          # 先列出归档的第一层目录名，再解包，避免管道写错误
          tar -I zstd -tf "$SDK_FILE" > "$RUNNER_TEMP/sdk/list.txt"
          SDK_BASE="$(head -n1 "$RUNNER_TEMP/sdk/list.txt" | cut -d/ -f1)"
          tar -I zstd -xf "$SDK_FILE" -C "$RUNNER_TEMP/sdk"
          SDK_DIR="$RUNNER_TEMP/sdk/$SDK_BASE"
          echo "SDK_DIR=$SDK_DIR" >> "$GITHUB_ENV"
          echo "SDK_BASE=$SDK_BASE" >> "$GITHUB_ENV"
          ln -s "$SDK_DIR" sdk

      - name: Setup feeds
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare .config (non-interactive)
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          # 生成默认配置，避免触发 menuconfig（TUI）
          make defconfig

      - name: Add package into SDK
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          rm -rf "package/$PACKAGE_NAME"
          ln -s "$GITHUB_WORKSPACE" "package/$PACKAGE_NAME"
          if [ -d "$GITHUB_WORKSPACE/po" ]; then
            find "$GITHUB_WORKSPACE/po" -maxdepth 2 -type f -name 'nodemanager.po' -printf 'Found i18n: %P\n' || true
          fi

      - name: Build package
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          export PATH="$PWD/staging_dir/hostpkg/bin:$PWD/staging_dir/host/bin:$PATH"
          make -j"$(nproc)" V=s package/$PACKAGE_NAME/compile

      - name: Build i18n subpackages (if any)
        run: |
          set -euo pipefail
          cd "$SDK_DIR"
          lang_suffix() {
            case "$1" in
              zh_Hans|zh-cn) echo zh-cn ;;
              zh_Hant|zh-tw) echo zh-tw ;;
              *) echo "$1" ;;
            esac
          }
          if [ -d "$GITHUB_WORKSPACE/po" ]; then
            for d in "$GITHUB_WORKSPACE"/po/*; do
              [ -d "$d" ] || continue
              base="$(basename "$d")"
              code="$(lang_suffix "$base")"
              make -j"$(nproc)" V=s package/luci-i18n-nodemanager-"$code"/compile || true
            done
          fi

      - name: Collect artifacts
        if: always()
        run: |
          set -e
          OUT_DIR="$SDK_DIR/bin/targets/$OWRT_TARGET/$OWRT_SUBTARGET/packages"
          if [ -d "$OUT_DIR" ]; then
            mkdir -p "$GITHUB_WORKSPACE/output"
            cp -v "$OUT_DIR"/luci-app-nodemanager_*.ipk "$GITHUB_WORKSPACE/output/" || true
            cp -v "$OUT_DIR"/luci-i18n-nodemanager-*_*.ipk "$GITHUB_WORKSPACE/output/" || true
            ls -l "$GITHUB_WORKSPACE/output" || true
          else
            echo "No output dir: $OUT_DIR"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipk-${{ env.OWRT_VER }}-${{ env.OWRT_TARGET }}-${{ env.OWRT_SUBTARGET }}
          path: output/*.ipk
          if-no-files-found: warn
